openapi: '3.0.2'
info:
  title: Book-Management from Ciu 1.0
  description: |
    書籍管理のシステムを通してAPIの設計と実装を学ぼう!
  
  contact:
    name: Ciu (Developer)
    email: shuya.suzuki.job@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080/api/v1
tags:
  - name: 本
    description: 購入済みの本を検索
  - name: 申請
    description: 購入や貸出、返却の申請を行う
paths:
  /books:
    get:
      tags:
        - 本
      summary: 登録されている本を取得する
      description: CSVからデータを取得
      responses:
        200:
          description: Successful getting book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        405:
          description: 'Error: 本が存在しません。'
    post:
      tags:
        - 本
      summary: 本を新規で登録する
      description: CSVに本のデータを挿入する
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
  /request/buy:
    post:
      tags:
        - 申請
      summary: 本の購入申請
      description: 購入申請履歴CSVに申請情報を登録する
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
  /request/borrow/{bookId}:
    post:
      tags:
        - 申請
      summary: 本の貸出申請
      description: 申請履歴CSVに申請情報を登録する
      parameters:
        - name: bookId
          in: path
          description: 本のID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
  /request/lend/{bookId}:
    post:
      tags:
        - 申請
      summary: 本の返却申請
      description: 申請履歴CSVに返却情報を登録する
      parameters:
        - name: bookId
          in: path
          description: 本のID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input

components:
  schemas:
    Book:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          example: 10
        bookName:
          type: string
          example: リーダブルコード
        status:
          type: string
          description: book status for lental
          enum:
            - available
            - lending
    bookId:
      type: integer
      description: 本のID
